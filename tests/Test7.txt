typedef half : f16; // a half is a 16-bit half-precision floating-point value
typedef float : f32; // a float is a 32-bit single-precision floating-point value
typedef double : f64; // a double is a 64-bit double-precision floating-point value
typedef int : i32; // an int is a 32-bit integral value
typedef long : i64; // a long is a 64-bit integral value
typedef schar: i8; // signed char is a 1-bit integral value
typedef char : schar; // char is a signed char
typedef string : char*; // a string is a char*

extern "C" fn putchar:int takes [i32 test];
extern "C" fn puts:int takes [i8* str];
extern "C" fn printf takes [char* fmt, ...];
extern "C" fn srand takes [i32 x];
extern "C" fn rand:int takes [];

/**
* This is a Monte Carlo simulation to find Pi.
* It uses a unit circle inscribed in a square and
* finds the probability of guessing a point in
* the circle.
* Note: This test relies on the deterministic property of the rand()
* pseudo-random number generator.
*/

fn main:i32 takes [i32 argc, i8** argv]{
	let double x = 0;
	let double y = 0;
	srand(314159264);
	let int iter_count = 10000000;
	let int count = 0;
	let double int_max = 2147483647.0; // RAND_MAX usually equals INT_MAX
	for(let int i = 0; i < iter_count; i = i + 1){
		x = rand();
		x = x / int_max;
		y = rand();
		y = y / int_max;
		//printf("%f, %f\n", x, y);
		let double z = (x * x) + (y * y); // square of hypotenuse length
		if(z <= 1) count = count + 1;
	}
	let double dcount = (count * 4);
	let double icount = (iter_count);
	let double pi = (dcount) / (icount);
	printf("# of trials = %d (ct. %d), estimate of pi is %f\n", iter_count, count, pi);
	return 0;
}